-- TODO: use pg_dump

-- Custom types
drop type if exists public.condition;
create type public.condition as enum ('brand-new', 'perfect', 'very-good', 'good', 'OK');

drop type if exists public.suspension;
create type public.suspension as enum ('full', 'front', 'none');

drop type if exists public.drive_type;
create type public.drive_type as enum ('manual', 'electric');

drop type if exists public.brake_type;
create type public.brake_type as enum ('disc-hydraulic', 'disc-mechanical', 'rim');

drop type if exists public.wheel_size;
create type public.wheel_size as enum ('26"', '27.5"', '29"');

drop type if exists public.bike_category;
create type public.bike_category as enum ('road', 'gravel', 'xc', 'all-mountain', 'trail', 'enduro', 'downhill', 'bmx', 'other');

-- USERS
-- create table public.users (
--   id          uuid not null primary key, -- UUID from auth.users
--   username    text,
--   status      user_status default 'OFFLINE'::public.user_status
-- );
-- comment on table public.users is 'Profile data for each user.';
-- comment on column public.users.id is 'References the internal Supabase Auth user.';

-- -- CHANNELS
-- create table public.channels (
--   id            bigint generated by default as identity primary key,
--   inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
--   slug          text not null unique,
--   created_by    uuid references public.users not null
-- );
-- comment on table public.channels is 'Topics and groups.';

-- Secure the tables
-- alter table public.users enable row level security;
-- alter table public.channels enable row level security;
-- alter table public.messages enable row level security;
-- alter table public.user_roles enable row level security;
-- alter table public.role_permissions enable row level security;
-- create policy "Allow logged-in read access" on public.users for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.users for insert with check ( auth.uid() = id );
-- create policy "Allow individual update access" on public.users for update using ( auth.uid() = id );
-- create policy "Allow logged-in read access" on public.channels for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.channels for insert with check ( auth.uid() = created_by );
-- create policy "Allow individual delete access" on public.channels for delete using ( auth.uid() = created_by );
-- create policy "Allow authorized delete access" on public.channels for delete using ( authorize('channels.delete', auth.uid()) );
-- create policy "Allow logged-in read access" on public.messages for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.messages for insert with check ( auth.uid() = user_id );
-- create policy "Allow individual update access" on public.messages for update using ( auth.uid() = user_id );
-- create policy "Allow individual delete access" on public.messages for delete using ( auth.uid() = user_id );
-- create policy "Allow authorized delete access" on public.messages for delete using ( authorize('messages.delete', auth.uid()) );
-- create policy "Allow individual read access" on public.user_roles for select using ( auth.uid() = user_id );